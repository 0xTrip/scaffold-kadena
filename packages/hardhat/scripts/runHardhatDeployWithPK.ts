import * as dotenv from "dotenv";
dotenv.config();
import { Wallet } from "ethers";
import password from "@inquirer/password";
import { chainweb } from "hardhat";
import type { DeployedContractsOnChains } from "hardhat-kadena/src/utils";
import hre from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Generate deployedContracts.ts file for frontend
 */
async function generateDeployedContractsFile(deployments: any[]) {
  const contractName: string = "YourContract";
  const deploymentsByChain: Record<number, DeployedContractsOnChains> = {};
  const deployedContracts: Record<string, any> = {};

  // Get et the ABI from compilation artifacts
  const artifact = await hre.artifacts.readArtifact(contractName);
  console.log("deployments in generateDeployedContractsFile", deployments);

  // Create a map of deployments by chain ID for easy lookup

  for (const deployment of deployments) {
    deploymentsByChain[deployment.chain] = deployment;
  }

  // Process deployments using runOverChains for consistency
  await chainweb.runOverChains(async chainId => {
    // No need for explicit chainweb chain switching, runOverChains does that for us
    console.log("network.config.chainId", network.config.chainId);

    // Skip chains that weren't in our successful deployments
    if (!deploymentsByChain[chainId]) {
      console.log(`No deployment for chain ${chainId}, skipping verification`);
      return;
    }

    const deployment = deploymentsByChain[chainId];
    deployedContracts[network.config.chainId] = {
      YourContract: {
        address: deployment.address,
        abi: artifact.abi, // Use the ABI from compilation artifacts
      },
    };
  });

  const contractsDir = path.join(__dirname, "../../nextjs/contracts");
  const filePath = path.join(contractsDir, "deployedContracts.ts");

  const fileContent = `/**
 * This file is autogenerated by Scaffold-Kadena.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  fs.writeFileSync(filePath, fileContent);
  console.log("✅ Generated deployedContracts.ts");
}

/**
 * Unencrypts the private key and runs the hardhat deploy command
 */
async function main() {
  let deployed: { deployments: DeployedContractsOnChains[] };
  let successfulDeployments: DeployedContractsOnChains[];

  // Make sure we're on the first chainweb chain
  const chains = await chainweb.getChainIds();
  console.log("chains,", chains);
  await chainweb.switchChain(chains[0]);
  const [deployer] = await ethers.getSigners();
  console.log("deployer", deployer);

  console.log(`Deploying contracts with deployer account: ${deployer.address} on network: ${network.name}`);

  const isLocalNetwork = network.name.includes("hardhat") || network.name.includes("localhost");

  console.log("isLocalNetwork", isLocalNetwork);

  if (isLocalNetwork) {
    deployed = await chainweb.deployContractOnChains({
      name: "YourContract",
      constructorArgs: [deployer.address],
    });
    if (deployed.deployments.length === 0) {
      console.log("No contracts deployed");
      process.exit(0);
      return;
    }

    // Filter out failed deployments
    successfulDeployments = deployed.deployments.filter(d => d !== null);
    console.log("Successful deployments:", successfulDeployments);

    if (successfulDeployments.length > 0) {
      console.log(`Contract successfully deployed to ${successfulDeployments.length} chains`);

      // Generate file for local deployments
      await generateDeployedContractsFile(successfulDeployments);
      process.exit(0);
    }
  }

  const encryptedKey = process.env.DEPLOYER_PRIVATE_KEY_ENCRYPTED;

  if (!encryptedKey) {
    console.log("🚫️ You don't have a deployer account. Run `yarn generate` or `yarn account:import` first");
    return;
  }

  console.log("Asking for password to decrypt private key...");
  const pass = await password({ message: "Enter password to decrypt private key:" });

  try {
    const wallet = await Wallet.fromEncryptedJson(encryptedKey, pass);
    const signer = wallet.connect(hre.ethers.provider);

    deployed = await chainweb.deployContractOnChains({
      name: "YourContract",
      signer: signer, // Use the signer associated with the decrypted private key
      constructorArgs: [deployer.address],
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  } catch (e) {
    console.error("Failed to decrypt private key. Wrong password?");
    process.exit(1);
  }

  if (deployed.deployments.length === 0) {
    console.log("No contracts deployed");
    return;
  }
  // ...existing code...
  console.log("Contracts deployed");

  console.log("network.config.chainId", network.config.chainId);

  // Filter out failed deployments
  successfulDeployments = deployed.deployments.filter(d => d !== null);
  console.log("Successful deployments:", successfulDeployments);

  if (successfulDeployments.length > 0) {
    console.log(`Contract successfully deployed to ${successfulDeployments.length} chains`);

    // Generate file for local deployments
    await generateDeployedContractsFile(successfulDeployments);
    process.exit(0);
  }
}

main().catch(console.error);
