import { spawn } from "child_process";
import { chainweb, network, ethers, artifacts } from "hardhat";
import { Wallet } from "ethers";
import password from "@inquirer/password";
import type { SignerWithAddress } from "@nomicfoundation/hardhat-ethers/signers";
import type { DeployedContractsOnChains } from "hardhat-kadena/src/utils";
import fs from "fs";
import path from "path";
import * as dotenv from "dotenv";
dotenv.config();

/**
 * Generate deployedContracts.ts file for frontend
 */
async function generateDeployedContractsFile(deployments: any[]) {
  const contractName: string = "YourContract";
  const deploymentsByChain: Record<number, DeployedContractsOnChains> = {};
  const deployedContracts: Record<string, any> = {};

  // Get et the ABI from compilation artifacts
  const artifact = await artifacts.readArtifact(contractName);
  console.log("deployments in generateDeployedContractsFile", deployments);

  // Create a map of deployments by chain ID for easy lookup

  for (const deployment of deployments) {
    deploymentsByChain[deployment.chain] = deployment;
  }

  // Process deployments using runOverChains for consistency
  await chainweb.runOverChains(async chainId => {
    // No need for explicit chainweb chain switching, runOverChains does that for us
    console.log("network.config.chainId", network.config.chainId);

    // Skip chains that weren't in our successful deployments
    if (!deploymentsByChain[chainId]) {
      console.log(`No deployment for chain ${chainId}, skipping verification`);
      return;
    }

    const deployment = deploymentsByChain[chainId];
    deployedContracts[network.config.chainId] = {
      YourContract: {
        address: deployment.address,
        abi: artifact.abi, // Use the ABI from compilation artifacts
      },
    };
  });

  const contractsDir = path.join(__dirname, "../../nextjs/contracts");
  const filePath = path.join(contractsDir, "deployedContracts.ts");

  const fileContent = `/**
 * This file is autogenerated by Scaffold-Kadena.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  fs.writeFileSync(filePath, fileContent);
  console.log("‚úÖ Generated deployedContracts.ts");
}

/**
 * Deploys using the Hardhat Kadena plugin direcftly for local. It decrypts the encrypted PK (if used)
 * and spawns a new process for remote deployment
 */
async function main() {
  let deployed: { deployments: DeployedContractsOnChains[] };
  let successfulDeployments: DeployedContractsOnChains[];
  let deployer: SignerWithAddress;
  let decryptedPrivateKey: string;

  // Make sure we're on the first chainweb chain
  const chains = await chainweb.getChainIds();
  console.log("chains,", chains);
  await chainweb.switchChain(chains[0]);

  const isLocalNetwork = network.name.includes("hardhat") || network.name.includes("localhost");

  if (isLocalNetwork) {
    // LOCAL: Simple deployment with built-in Hardhat accounts
    [deployer] = await ethers.getSigners();
    console.log("deployer", deployer);

    console.log(`Deploying contracts with deployer account: ${deployer.address} on network: ${network.name}`);

    deployed = await chainweb.deployContractOnChains({
      name: "YourContract",
      constructorArgs: [deployer.address],
    });
    if (deployed.deployments.length === 0) {
      console.log("No contracts deployed");
      process.exit(0);
      return;
    }

    // Filter out failed deployments
    successfulDeployments = deployed.deployments.filter(d => d !== null);
    console.log("Successful deployments:", successfulDeployments);

    if (successfulDeployments.length > 0) {
      console.log(`Contract successfully deployed to ${successfulDeployments.length} chains`);

      // Generate file for local deployments
      await generateDeployedContractsFile(successfulDeployments);
      process.exit(0);
    }
  }

  // REMOTE: Use spawn pattern for encrypted keys
  const encryptedKey = process.env.DEPLOYER_PRIVATE_KEY_ENCRYPTED;
  const plainKey = process.env.DEPLOYER_PRIVATE_KEY;

  if (encryptedKey) {
    console.log("Using encrypted private key...");
    const pass = await password({ message: "Enter password to decrypt private key:" });

    try {
      const wallet = await Wallet.fromEncryptedJson(encryptedKey, pass);
      decryptedPrivateKey = wallet.privateKey;
    } catch (e) {
      console.error("Failed to decrypt private key. Wrong password?", e);
      process.exit(1);
    }
  } else if (plainKey) {
    console.log("Using plain private key from .env...");
    decryptedPrivateKey = plainKey;
  } else {
    console.log("üö´Ô∏è No private key found. Set DEPLOYER_PRIVATE_KEY or DEPLOYER_PRIVATE_KEY_ENCRYPTED");
    return;
  }

  // Spawn a new hardhat process with the decrypted key
  console.log("Spawning hardhat process for remote deployment...");

  const env = {
    ...process.env,
    __RUNTIME_DEPLOYER_PRIVATE_KEY: decryptedPrivateKey,
  };

  const chainwebNetwork = network.name.includes("testnet")
    ? "testnet"
    : network.name.includes("mainnet")
      ? "mainnet"
      : "testnet";

  console.log("Using chainweb network:", chainwebNetwork);

  const chainwebArgs = ["--chainweb", chainwebNetwork];

  const spawnedProcess = spawn("npx", ["hardhat", "run", "scripts/deployToRemoteChains.ts", ...chainwebArgs], {
    stdio: "inherit",
    env: env,
    cwd: process.cwd(),
  });

  spawnedProcess.on("close", code => {
    if (code === 0) {
      console.log("‚úÖ Remote deployment completed successfully");
    } else {
      console.error(`‚ùå Remote deployment failed with exit code ${code}`);
      process.exit(code || 1);
    }
  });
}

main().catch(console.error);
