import fs from "fs";
import path from "path";
import url from "url";

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));

const root = path.resolve(__dirname, "..");
const foundryOut = path.join(root, "out", "YourContract.sol", "YourContract.json");
const broadcastRoot = path.join(root, "broadcast", "multi");
const nextContractsDir = path.resolve(__dirname, "../../nextjs/contracts");
const targetFile = path.join(nextContractsDir, "deployedContracts.ts");

function readAbi() {
  const artifact = JSON.parse(fs.readFileSync(foundryOut, "utf8"));
  return artifact.abi;
}

function collectDeployments() {
  const result = {};
  const abi = readAbi();

  if (!fs.existsSync(broadcastRoot)) return result;
  // latest multi run lives in broadcast/multi/Deploy.s.sol-latest/run.json
  const latest = path.join(broadcastRoot, "Deploy.s.sol-latest", "run.json");
  if (fs.existsSync(latest)) {
    try {
      const multi = JSON.parse(fs.readFileSync(latest, "utf8"));
      const deployments = multi.deployments || [];
      for (const d of deployments) {
        const chainId = String(d.chain);
        const receipts = d.receipts || [];
        const created = receipts.find(r => r.contractAddress);
        if (!created) continue;
        const address = created.contractAddress;
        result[chainId] = { YourContract: { address, abi } };
      }
    } catch {}
  }
  return result;
}

function writeDeployedContracts(map) {
  if (!fs.existsSync(nextContractsDir)) fs.mkdirSync(nextContractsDir, { recursive: true });
  const header = `/**\n * This file is autogenerated by Scaffold-Kadena.\n * You should not edit it manually or your changes might be overwritten.\n */`;
  const content = `${header}\nimport { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";\n\nconst deployedContracts = ${JSON.stringify(
    map,
    null,
    2,
  )} as const;\n\nexport default deployedContracts satisfies GenericContractsDeclaration;\n`;
  fs.writeFileSync(targetFile, content);
  console.log("âœ… Updated:", targetFile);
}

const deployments = collectDeployments();
writeDeployedContracts(deployments);


