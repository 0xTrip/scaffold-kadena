/* eslint-disable @typescript-eslint/no-var-requires */
import fs from "fs";
import path from "path";

type ChainIdToContract = Record<string, { YourContract: { address: string; abi: any } }>;

const root = path.resolve(__dirname, "../../");
const foundryOut = path.join(root, "out", "YourContract.sol", "YourContract.json");
const broadcastRoot = path.join(root, "broadcast", "Deploy.s.sol");
const nextContractsDir = path.resolve(__dirname, "../../nextjs/contracts");
const targetFile = path.join(nextContractsDir, "deployedContracts.ts");

function readAbi() {
  const artifact = JSON.parse(fs.readFileSync(foundryOut, "utf8"));
  return artifact.abi;
}

function collectDeployments(): ChainIdToContract {
  const result: ChainIdToContract = {};
  const abi = readAbi();

  if (!fs.existsSync(broadcastRoot)) return result;
  const entries = fs.readdirSync(broadcastRoot, { withFileTypes: true });
  for (const entry of entries) {
    if (!entry.isDirectory()) continue;
    const runLatest = path.join(broadcastRoot, entry.name, "run-latest.json");
    if (!fs.existsSync(runLatest)) continue;
    try {
      const data = JSON.parse(fs.readFileSync(runLatest, "utf8"));
      // Find receipts with contractAddress
      const receipts = (data.receipts || []) as Array<{ contractAddress?: string }>;
      const created = receipts.find(r => r.contractAddress);
      if (!created) continue;
      const address = created.contractAddress as string;
      const chainId = entry.name; // directory is chain id when using --rpc-url alias, plugin sets vm.chainId
      result[chainId] = {
        YourContract: { address, abi },
      };
    } catch {}
  }
  return result;
}

function writeDeployedContracts(map: ChainIdToContract) {
  if (!fs.existsSync(nextContractsDir)) fs.mkdirSync(nextContractsDir, { recursive: true });
  const header = `/**\n * This file is autogenerated by Scaffold-Kadena.\n * You should not edit it manually or your changes might be overwritten.\n */`;
  const content = `${header}\nimport { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";\n\nconst deployedContracts = ${JSON.stringify(
    map,
    null,
    2,
  )} as const;\n\nexport default deployedContracts satisfies GenericContractsDeclaration;\n`;
  fs.writeFileSync(targetFile, content);
  console.log("âœ… Updated:", targetFile);
}

const deployments = collectDeployments();
writeDeployedContracts(deployments);


